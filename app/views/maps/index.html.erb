
<div id="map"></div>


<!-- <input type="file" id="files" name="files[]" multiple /> -->
<output id="list"></output>


<div id="drop_zone">Drop files here</div>
<output id="list"></output>

<script>





  function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
    	var reader = new FileReader();

      reader.onload = function(event) {
        var content = event.target.result;
        var array = CSVToArray(content) ;
        for (var i=1; i< array.length;i++){
          var geohash = array[i][1];
          var employeeId = array[i][0];
          var latlong = decodeGeoHash(geohash) ;
          marker = L.marker( new L.LatLng(latlong.latitude[0], latlong.longitude[0])).addTo(map);
          marker.bindPopup("<b>"+employeeId+"</b>").openPopup();
        }
      };

  		reader.onerror = function(event) {
  		    console.error("File could not be read! Code " + event.target.error.code);
  		};

    	reader.readAsText(f);

		  // pretty output   	
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }

    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
  }

  // Setup the dnd listeners.
  var dropZone = document.getElementById('drop_zone');
  dropZone.addEventListener('dragover', handleDragOver, false);
  dropZone.addEventListener('drop', handleFileSelect, false);
</script>